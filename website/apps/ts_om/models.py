# -*- coding: utf-8 -*-
#
# This file is part of the VecNet OpenMalaria Portal.
# For copyright and licensing information about this package, see the
# NOTICE.txt and LICENSE.txt files in its top-level directory; they are
# available at https://github.com/vecnet/om
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License (MPL), version 2.0.  If a copy of the MPL was not distributed
# with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

from io import StringIO

from django.core.files.base import ContentFile, File
from django.db import models
from django.contrib.auth.models import User
from lxml import etree
from lxml.etree import XMLSyntaxError
from vecnet.openmalaria.scenario.scenario import Scenario as ScenarioXML


class BaselineScenario(models.Model):
    name = models.CharField(max_length=200)
    xml = models.TextField()

    def __str__(self):
        return self.name


class DemographicsSnippet(models.Model):
    name = models.CharField(max_length=200)
    maximum_age_yrs = models.CharField(max_length=200)
    xml = models.TextField()
    title = models.CharField(max_length=200)
    url = models.CharField(max_length=200)

    def __str__(self):
        return self.title


class ModelSnippet(models.Model):
    """
    These snippets provide parameters calibrated by model fitting as well as some
model options chosen to differentiate the model. Downloaded from
https://code.google.com/p/openmalaria/source/browse/v32/models+5-day/?repo=snippets

See the publication "Ensemble Modeling of the Likely Public Health Impact of a
Pre-Erythrocytic Malaria Vaccine", Smith et al, for a description of these
models:
http://www.plosmedicine.org/article/info%3Adoi%2F10.1371%2Fjournal.pmed.1001157

Summary of the description is available on
http://www.plosmedicine.org/article/fetchObject.action?uri=info:doi/10.1371/journal.pmed.1001157.t002&representation=PNG_L
    """
    name = models.CharField(max_length=200)
    xml = models.TextField()

    def __str__(self):
        return self.name


class Simulation(models.Model):
    NEW = "New"
    QUEUED = "Submitted"
    RUNNING = "Running"
    COMPLETE = "Complete"
    FAILED = "Failed"
    STATUSES = (NEW, QUEUED, RUNNING, COMPLETE, FAILED, )

    # Version of the model (i.e. 30, 32, etc)
    version = models.TextField(default="32")
    # Status of this simulation - Running, Complete, Failed
    status = models.TextField(choices=list(zip(STATUSES, STATUSES)), default=NEW)

    # PID of process (or job id)
    pid = models.TextField(default="")

    # Work directory when simulation was executed. For debugging purpose mostly
    cwd = models.TextField(default="")
    # XML input
    input_file = models.FileField(blank=True, null=True, upload_to='files/%Y/%m/')
    # Output files generated by OpenMalaria
    output_file = models.FileField(blank=True, null=True, upload_to='files/%Y/%m/')
    ctsout_file = models.FileField(blank=True, null=True, upload_to='files/%Y/%m/')
    # Standard output from the model
    model_stdout = models.FileField(blank=True, null=True, upload_to='files/%Y/%m/')

    creation_timestamp = models.DateTimeField(auto_now_add=True)
    last_modified = models.DateTimeField(auto_now=True)
    last_error_message = models.TextField(default="", blank=True)

    class Meta:
        db_table = "simulation"

    def __str__(self):
        return "%s" % self.id

    def set_input_file(self, fp):
        if isinstance(fp, str):
            f = ContentFile(fp)
        else:
            f = File(fp)
        self.input_file.save("scenario_%s.xml" % self.id, f)

    def set_output_file(self, fp):
        if isinstance(fp, str):
            f = ContentFile(fp)
        else:
            f = File(fp)
        self.output_file.save("output_%s.txt" % self.id, f)

    def set_ctsout_file(self, fp):
        if isinstance(fp, str):
            f = ContentFile(fp)
        else:
            f = File(fp)
        self.ctsout_file.save("ctsout_%s.txt" % self.id, f)

    def set_model_stdout(self, fp):
        if isinstance(fp, str):
            f = ContentFile(fp)
        else:
            f = File(fp)
        self.model_stdout.save("model_stdout_%s.txt" % self.id, f)


class Scenario(models.Model):
    # Status is derived from simulation's status. If there is no simulation, use STATUS_NEW
    STATUS_NEW = "New"

    # User-defined scenario name
    name = models.TextField(default="")
    # Scenario XML
    xml = models.TextField()
    # The first year simulated
    # The name "start_date" is somewhat misleading, should be renamed at some point
    start_date = models.IntegerField(default=2016)
    # Owner of the simulation
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    new_simulation = models.OneToOneField(
        Simulation, null=True, blank=True, related_name="scenario",
        on_delete=models.PROTECT
    )
    last_modified = models.DateTimeField(auto_now=True)
    # Whether is scenario is deleted or not
    deleted = models.BooleanField(default=False)
    description = models.TextField(null=True, blank=True)
    is_public = models.BooleanField(default=False)
    baseline = models.ForeignKey(BaselineScenario, null=True, blank=True, on_delete=models.PROTECT)

    @property
    def demography(self):
        try:
            scenario = ScenarioXML(self.xml)
            demography_name = scenario.demography
        except Exception:
            demography_name = "no_name"

        return demography_name

    @property
    def version(self):
        try:
            scenario = ScenarioXML(self.xml)
            version = scenario.schemaVersion
        except Exception:
            version = "Unknown"

        return version

    @property
    def status(self):
        try:
            status = self.new_simulation.status
        except Exception:
            status = self.STATUS_NEW
        return status

    @property
    def output_file(self):
        if not self.new_simulation or not self.new_simulation.model_stdout:
            return None
        return self.new_simulation.model_stdout


class AnophelesSnippet(models.Model):
    # Vector description in /om:scenario/entomology/vector/anopheles section of xml
    anopheles = models.TextField(null=False, blank=False)
    # anophelesParams in /om:scenario/interventions/human/component/GVI section.
    # Only required if GVI interventions are applied.
    gvi_anophelesParams = models.TextField(null=True, blank=True)
    # anophelesParams in /om:scenario/interventions/human/component/ITN section.
    # Only required if ITN interventions are applied.
    itn_anophelesParams = models.TextField(null=True, blank=True)
    # anophelesParams in /om:scenario/interventions/human/component/IRS section.
    # Only required if IRS interventions are applied.
    irs_anophelesParams = models.TextField(null=True, blank=True)

    @property
    def name(self):
        try:
            tree = etree.parse(StringIO(str(self.anopheles)))
        except XMLSyntaxError:
            name = "Invalid xml snippet"
        else:
            try:
                name = tree.getroot().xpath('@mosquito')[0]
            except IndexError:
                name = "Unnamed anopheles snippet"
        return name

    def __str__(self):
        return self.name


class InterventionComponent(models.Model):
    name = models.CharField(max_length=200)
    tag = models.CharField(max_length=200)

    def __str__(self):
        return self.name


class InterventionSnippet(models.Model):
    name = models.CharField(max_length=200)
    component = models.ForeignKey(InterventionComponent, null=False, on_delete=models.PROTECT)
    xml = models.TextField(null=False, blank=False)
    # URL to the documentation on OpenMalaria GitHub
    documentation_url = models.TextField(blank=True)

    def __str__(self):
        return self.name
